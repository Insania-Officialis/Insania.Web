# Название рабочего процесса
name: CI/CD Pipeline

# Триггеры запуска сборки:
on:
  # При пуше в ветку
  push:    
    # Список веток
    branches: [ main ]

# Определение заданий
jobs:
  # Задание для сборки
  build:
    # Запуск на собственных серверах
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [insania-linux-server, insania-windows-server]

    # Шаги выполнения задания
    steps:
    # Настройка для Linux
    - name: Настройка окружения Linux
      if: runner.os == 'Linux'
      run: |
        echo "WORKDIR=/app" >> $GITHUB_ENV
      shell: bash

    # Настройка для Windows
    - name: Настройка окружения Windows
      if: runner.os == 'Windows'
      run: |
        echo "WORKDIR=C:/Insania" >> $env:GITHUB_ENV
      shell: powershell

    # Обновление кода для Linux
    - name: Обновление кода (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$WORKDIR"
        cd Insania.Web
        git pull
      shell: bash

    # Обновление кода для Windows
    - name: Обновление кода (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        cd Insania.Web
        git pull
      shell: powershell

    # Остановка контейнера для Linux
    - name: Остановка контейнера (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$WORKDIR"
        docker-compose stop insania_web
      shell: bash

    # Остановка контейнера для Windows
    - name: Остановка контейнера (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose stop insania_web
      shell: powershell

    # Сборка контейнера для Linux
    - name: Сборка контейнера (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$WORKDIR"
        docker-compose build insania_web
      shell: bash

    # Сборка контейнера для Windows
    - name: Сборка контейнера (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose build insania_web
      shell: powershell

    # Запуск контейнера для Linux
    - name: Запуск контейнера (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$WORKDIR"
        docker-compose up -d insania_web
      shell: bash

    # Запуск контейнера для Windows
    - name: Запуск контейнера (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose up -d insania_web
      shell: powershell

    # Проверка статуса контейнера для Linux
    - name: Проверка статуса контейнера (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$WORKDIR"
        sleep 10
        status=$(docker-compose ps insania_web)
        echo "Статус контейнера: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Контейнер успешно запущен!"
          docker-compose ps
        else
          echo "❌ Не удалось запустить контейнер"
          docker-compose logs insania_web --tail=20
          exit 1
        fi
      shell: bash

    # Проверка статуса контейнера для Windows
    - name: Проверка статуса контейнера (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_web
        Write-Host "Статус контейнера: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Контейнер успешно запущен!"
          docker-compose ps
        } else {
          Write-Host "❌ Не удалось запустить контейнер"
          docker-compose logs insania_web --tail=20
          exit 1
        }
      shell: powershell