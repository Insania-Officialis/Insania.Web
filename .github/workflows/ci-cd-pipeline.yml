#Название рабочего процесса
name: CI/CD Pipeline

#Триггеры запуска сборки:
on:
  #При пуше в ветку
  push:    
    #Список веток
    branches: [ main ]

#Определение заданий
jobs:
  #Задание для сборки
  build:
    #Запуск на собственных серверах
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [insania-linux-server, insania-windows-server]

    #Шаги выполнения задания
    steps:
    #Получение кода из репозитория
    - name: Checkout code
      uses: actions/checkout@v4

    #Настройка для Linux
    - name: Setup Linux environment
      if: runner.os == 'Linux'
      run: |
        git config --global --add safe.directory /app/Insania.Web
        echo "WORKDIR=/app" >> $GITHUB_ENV
      shell: bash

    #Настройка для Windows
    - name: Setup Windows environment
      if: runner.os == 'Windows'
      run: |
        git config --global --add safe.directory *
        echo "WORKDIR=C:/Insania" >> $GITHUB_ENV
      shell: pwsh

    #Обновление кода для Linux
    - name: Update code (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$env:WORKDIR"
        cd Insania.Web
        git pull
      shell: bash

    #Обновление кода для Windows
    - name: Update code (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        cd Insania.Web
        git pull
      shell: pwsh

    #Остановка контейнера для Linux
    - name: Stop container (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$env:WORKDIR"
        docker-compose stop insania_web
      shell: bash

    #Остановка контейнера для Windows
    - name: Stop container (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose stop insania_web
      shell: pwsh

    #Сборка контейнера для Linux
    - name: Build container (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$env:WORKDIR"
        docker-compose build insania_web
      shell: bash

    #Сборка контейнера для Windows
    - name: Build container (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose build insania_web
      shell: pwsh

    #Запуск контейнера для Linux
    - name: Start container (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$env:WORKDIR"
        docker-compose up -d insania_web
      shell: bash

    #Запуск контейнера для Windows
    - name: Start container (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        docker-compose up -d insania_web
      shell: pwsh

    #Проверка статуса контейнера для Linux
    - name: Verify container status (Linux)
      if: runner.os == 'Linux'
      run: |
        cd "$env:WORKDIR"
        sleep 10
        status=$(docker-compose ps insania_web)
        echo "Container status: $status"
        
        if echo "$status" | grep -q "Up"; then
          echo "✅ Container is running successfully!"
          docker-compose ps
        else
          echo "❌ Container failed to start"
          docker-compose logs insania_web --tail=20
          exit 1
        fi
      shell: bash

    #Проверка статуса контейнера для Windows
    - name: Verify container status (Windows)
      if: runner.os == 'Windows'
      run: |
        cd $env:WORKDIR
        Start-Sleep -Seconds 10
        $status = docker-compose ps insania_web
        Write-Host "Container status: $status"
        
        if ($status -like "*Up*") {
          Write-Host "✅ Container is running successfully!"
          docker-compose ps
        } else {
          Write-Host "❌ Container failed to start"
          docker-compose logs insania_web --tail=20
          exit 1
        fi
      shell: pwsh