@page

@{
    ViewBag.Title = "Карта";
    Layout = "/Zones/Shared/_Layout.cshtml";
}

<script src="/js/api/geography_api.js" type="text/javascript"></script>
<script src="https://api-maps.yandex.ru/2.1/?apikey=2c0658bf-8a66-4ffa-ad14-b1df5b5311ca&lang=ru_RU" type="text/javascript"></script>

<script type="text/javascript">
    //Запуск инициализации карты, при её готовности
    ymaps.ready(init);

    //Функция инициализация карты
    async function init() {
        //Получение текущего url
        let currentLocation = window.location.origin;
        
        //Создание собственного слоя
        layer = function () { return new ymaps.Layer(function (tile, zoom) { return currentLocation + '/images/map.png' }) }

        //Добавление слоя в коллекцию слоёв карты
        ymaps.layer.storage.add('my#layer', layer);

        //Добавление нового типа на основании слоя в коллекцию типов карты
        ymaps.mapType.storage.add('my#type', new ymaps.MapType(
            'Пусто',
            ['my#layer']
        ));

        //Создание карты
        var map = new ymaps.Map("map", {
            //type: 'my#type', //тип карты
            center: [0, 0], //центр позиционирования
            zoom: 2, //коэффициент масштабирования
            controls: [], //элементы управления
        }, {
            //restrictMapArea: true, //ограничение области карты видимой областью
            restrictMapArea: [[-85, -180], [85, 179]], //ограничение области карты прямоугольной областью
            minZoom: 2, //минимальный масштаб
            suppressMapOpenBlock: true, //кнопка "Открыть в Яндекс картах"
        });

        //Ограничение пользовательского передвижения карты
        map.action.setCorrection(function (tick) {
            //Получение проекции
            var projection = map.options.get('projection');

            //Получение размера картыв
            var mapSize = map.container.getSize();

            //Получение центра
            var tickCenter = projection.fromGlobalPixels(tick.globalPixelCenter, tick.zoom);
            
            //Получение границ
            var top = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
            var bot = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
            var tickTop = projection.fromGlobalPixels(top, tick.zoom);
            var tickBot = projection.fromGlobalPixels(bot, tick.zoom);

            //Проверка пересечения границы по горизонтали
            if (tickTop[0] > 85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
                tick.duration = 0;
            }

            //Проверка пересечения по горизонтали
            if (tickBot[0] < -85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([-85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
                tick.duration = 0;
            }

            //Возврат положения
            return tick;
        });

        //Получение координат географических объектов
        var coordinates = await getCoordinates();

        //Проверки
        if (coordinates?.length) {
            //Проход по массиву координат географических объектов
            for (const item of coordinates) {
                //Проверка элемента координат географического объекта
                if (item?.items?.length) {
                    //Проход по массиву координат географического объекта
                    for (const coordinate of item?.items) {
                        //Проверка координат географического объекта
                        if (coordinate?.coordinates.length) {
                            //Создание полигона
                            var polygon = new ymaps.Polygon(coordinate.coordinates, {
                                //Стиль полигона
                                fillColor: '#00FF0080', //Прозрачный зелёный
                                strokeColor: '#0000FF', //Синяя обводка
                                strokeWidth: 2 //Ширина обводки
                            }, {
                                //Опции
                                editorDrawingCursor: 'crosshair', //Курсор при редактировании
                                fillRule: 'nonZero' //Правило заливки (важно для сложных фигур)
                            });

                            //Добавление полигона в коллекцию геообъектов карты
                            map.geoObjects.add(polygon);

                            //Запуск редактирование полигона
                            polygon.editor.startEditing();

                            //Добавление события измения координат изменяемого полигона
                            polygon.geometry.events.add('change', function () {
                                const coords = polygon.geometry.getCoordinates();
                                console.log("Новые координаты полигона:", coords);
                            });
                        }
                    }
                }
            }
        }
    }

    //Асинхронная функция получения координат
    async function getCoordinates() {
        try {
            //Получение списка географических объектов
            var geographicObjects = await getGeographyObjectsList();

            //Проверки
            if (!geographicObjects?.items?.length) throw new Error('Не удалось получить географические объекты');

            //Создание массива промисов для параллельных запросов
            const coordinatesPromises = geographicObjects.items.map(item => {
                //Проверка наличия идентификатора
                if (!item.id) throw new Error('Не указан идентификатор географического объекта: ${item}');

                //Возврат результата
                return getGeographyObjectsCoordinatesList(item.id);
            });

            //Ожидание получения всех координат
            const coordinatesResults = await Promise.all(coordinatesPromises);

            //Получение корректного списка координат
            const coordinates = coordinatesResults.filter(item => item !== null && item !== undefined);

            //Проверки
            if (!coordinates?.length) throw new Error('Не удалось получить координаты географических объектов');

            //Возврат результата
            return coordinates;
        }
        catch (error) {
            console.error('Ошибка получения координат: ', error);
            return null;
        }
    }
</script>

<div style="width: 100%; height: 100%">
    <div id="map" style="width: 100%; height: 90%"></div>
</div>