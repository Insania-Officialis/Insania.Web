@page

@{
    ViewBag.Title = "Карта";
    Layout = "/Zones/Shared/_Layout.cshtml";
}

<script src='/js/api/geography_api.js' type='text/javascript'></script>
<script src='/js/api/politics_api.js' type='text/javascript'></script>
<script src='/js/api/users_api.js' type='text/javascript'></script>
<script src='https://api-maps.yandex.ru/2.1/?apikey=2c0658bf-8a66-4ffa-ad14-b1df5b5311ca&lang=ru_RU' type='text/javascript'></script>

<style>
    #mapContainer {
        position: relative;
        width: 100%;
        height: 100%;
    }

    #map {
        width: 100%;
        height: 90%;
    }
</style>

<script type='text/javascript'>
    //Токен гостя
    var token;

    //Координаты географических объектов
    var geographyObjectsCoordinates;

    //Координаты стран
    var countriesCoordinates;

    //Полгионы географических объектов
    var geographyPolygons;

    //Полгионы стран
    var countriesPolygons;

    //Карта
    var map;

    //Признак редактируемости
    var isEdit = true;

    //Признак перемещения
    var isDragg = true;

    //Запуск инициализации карты, при её готовности
    ymaps.ready(init);

    //Ассинхронная функция инициализация карты
    async function init() {
        try {
            //Получение токена
            token = await login();

            //Получение координат
            geographyObjectsCoordinates = await getGeographyObjectsCoordinates();
            countriesCoordinates = await getCountriesCoordinates();

            //Создание фона карты
            let layer = createMapBackground();

            //Добавление слоя в коллекцию слоёв карты
            ymaps.layer.storage.add('my#layer', layer);

            //Добавление нового типа на основании слоя в коллекцию типов карты
            ymaps.mapType.storage.add('my#type', new ymaps.MapType(
                'Пусто',
                ['my#layer']
            ));

            //Создание карты
            map = new ymaps.Map('map', {
                type: 'my#type', //тип карты
                center: [39, 3], //центр позиционирования
                zoom: 2, //коэффициент масштабирования
                controls: [], //элементы управления
            }, {
                //restrictMapArea: true, //ограничение области карты видимой областью
                restrictMapArea: [[-85, -180], [85, 179]], //ограничение области карты прямоугольной областью
                minZoom: 2, //минимальный масштаб
                suppressMapOpenBlock: true, //кнопка 'Открыть в Яндекс картах'
            });

            //Инициализации коллекций объектов
            geographyPolygons = new ymaps.GeoObjectCollection();
            countriesPolygons = new ymaps.GeoObjectCollection();

            //Ограничение пользовательского передвижения карты
            map.action.setCorrection(restrictionUserMovement);

            //Добавление полигона в коллекцию геообъектов карты
            map.geoObjects.add(geographyPolygons);
            geographyPolygons.add(createPolygon(geographyObjectsCoordinates));
            map.geoObjects.add(countriesPolygons);
            countriesPolygons.add(createPolygon(countriesCoordinates));

            //Подписки на изменение полигонов
            document.querySelector('input[value="objects"]').addEventListener('change', updateVisibility);
            document.querySelector('input[value="countries"]').addEventListener('change', updateVisibility);
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка инициализации карты:', error);
        }
    }

    //Функция создания фона карты
    function createMapBackground() {
        try {
            //Получение текущего url
            let currentLocation = window.location.origin;

            //Создание собственного слоя
            layer = function () { return new ymaps.Layer(function () { return currentLocation + '/images/map.png' }) };

            //Возврат результат
            return layer;
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка создания фона карты:', error);
        }
    }

    //Функция ограничения пользовательского передвижения карты
    function restrictionUserMovement(tick) {
        try {
            //Получение проекции
            var projection = map.options.get('projection');

            //Получение размера картыв
            var mapSize = map.container.getSize();

            //Получение центра
            var tickCenter = projection.fromGlobalPixels(tick.globalPixelCenter, tick.zoom);

            //Получение границ
            var top = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
            var bot = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
            var tickTop = projection.fromGlobalPixels(top, tick.zoom);
            var tickBot = projection.fromGlobalPixels(bot, tick.zoom);

            //Проверка пересечения границы по горизонтали
            if (tickTop[0] > 85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
                tick.duration = 0;
            }

            //Проверка пересечения по горизонтали
            if (tickBot[0] < -85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([-85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
                tick.duration = 0;
            }

            //Возврат положения
            return tick;
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка ограничения пользовательского передвижения карты:', error);
        }
    }


    //Функция создания полигонов
    function createPolygon(coordinates) {
        //Проверки
        if (!coordinates?.length) throw new Error('Не указан массив координат');

        //Формирование переменной результата
        var polygons = new ymaps.GeoObjectCollection();

        //Проход по массиву координат
        for (const itemCoordinates of coordinates) {
            try {
                //Проверки
                if (!itemCoordinates?.items?.length) throw new Error('Не указаны координаты объекта');

                //Проход по массиву координат объекта
                for (const coordinate of itemCoordinates.items) {
                    //Проверки
                    if (!coordinate?.coordinates?.length) throw new Error('Не указана координата географического объекта');

                    //Создание полигона
                    const polygon = new ymaps.GeoObject(
                        {
                            //Описание геометрии объекта
                            geometry: {
                                type: 'Polygon', //тип
                                coordinates: coordinate.coordinates //координаты вершин
                            },
                            //Описание свойств геоообъекта
                            properties: {
                                id: coordinate.id, //идентификатор координаты географического объекта
                                objectId: itemCoordinates.id, //идентификатор географического объекта
                                coordinateId: coordinate.coordinate_id, //идентификатор координаты
                                name: coordinate.Name, //наименование географического объекта
                                center: coordinate.center, //центр географического объекта
                                zoom: coordinate.zoom //масштаб географического объекта
                            }
                        },
                        //Описание опций геообъекта
                        {
                            draggable: false, //Добавление возможности перетаскивания
                            fillColor: coordinate.background_color, //цвет заливки
                            strokeColor: coordinate.border_color, //цвет обводки
                            opacity: 1, //общая прозрачность
                            strokeWidth: 0.1 //ширина обводка
                        }
                    );

                    //Добавление события нажатия
                    polygon.events.add('contextmenu', viewMenuAction);

                    //Добавление полигона в массив
                    polygons.add(polygon);
                }
            }
            catch (error) {
                console.error(`Ошибка обработки координат ${error}`);
            }
        }

        //Возврат результата
        return polygons;
    }

    //Функция обновления видимости
    function updateVisibility() {
        //Получение нажатия элементов
        const objectsChecked = document.querySelector('input[value="objects"]').checked;
        const countriesChecked = document.querySelector('input[value="countries"]').checked;

        //Изменение видимости
        geographyPolygons.options.set('visible', objectsChecked);
        countriesPolygons.options.set('visible', countriesChecked);
        
        //Выход, если просто выключили географические объекты
        if (!objectsChecked) return;

        //Перевключение видимости нижестоящих объектов, если они включены
        if (countriesChecked) {
            countriesPolygons.options.set('visible', false);
            countriesPolygons.options.set('visible', true);
        }
    }

    //Функция отображения меню действий
    function viewMenuAction(e) {
        //Получение меню со страницы
        var menu = document.getElementById('menuAction');

        //Скрытие имеющегося меню
        if (menu.style.visibility === 'visible') {
            menu.style.visibility = 'hidden';
        }

        //Смена позиции меню
        menu.style.left = e.get('pagePixels')[0] + 'px';
        menu.style.top = e.get('pagePixels')[1] + 'px';

        //Отображение меню
        menu.style.visibility = 'visible';
        console.log(e);
    }

    //Асинхронная функция получения координат географических объектов
    async function getGeographyObjectsCoordinates() {
        try {
            //Получение списка географических объектов
            var geographicObjects = await getGeographyObjectsList();

            //Создание массива промисов для параллельных запросов
            const coordinatesPromises = geographicObjects.map(item => {
                //Проверка наличия идентификатора
                if (!item.id) throw new Error(`Не указан идентификатор географического объекта: ${item}`);

                //Возврат результата
                return getGeographyObjectsCoordinatesList(item.id);
            });

            //Ожидание получения всех координат
            const coordinatesResults = await Promise.all(coordinatesPromises);

            //Получение корректного списка координат
            const coordinates = coordinatesResults.filter(item => item !== null && item !== undefined);

            //Проверки
            if (!coordinates?.length) throw new Error('Не удалось получить координаты географических объектов');

            //Возврат результата
            return coordinates;
        }
        catch (error) {
            console.error(`Ошибка получения координат ${error}`);
            return null;
        }
    }

    //Асинхронная функция получения координат стран
    async function getCountriesCoordinates() {
        try {
            //Получение списка стран
            var countries = await getCountriesList();

            //Создание массива промисов для параллельных запросов
            const coordinatesPromises = countries.map(item => {
                //Проверка наличия идентификатора
                if (!item.id) throw new Error(`Не указан идентификатор страны: ${item}`);

                //Возврат результата
                return getCountriesCoordinatesList(item.id);
            });

            //Ожидание получения всех координат
            const coordinatesResults = await Promise.all(coordinatesPromises);

            //Получение корректного списка координат
            const coordinates = coordinatesResults.filter(item => item !== null && item !== undefined);

            //Проверки
            if (!coordinates?.length) throw new Error('Не удалось получить координаты страны');

            //Возврат результата
            return coordinates;
        }
        catch (error) {
            console.error(`Ошибка получения координат ${error}`);
            return null;
        }
    }
</script>

<div id='mapContainer'>
    <div id='map'></div>
    <div id='layerPanel' class='map__block-layer'>
        <h3>Слои:</h3>
        <label class='map__label-layer'>
            <input class='map__checkbox-layer' type='checkbox' name='filter' value='objects' checked> Показать объекты
        </label>
        <label class='map__label-layer'>
            <input class='map__checkbox-layer' type='checkbox' name='filter' value='countries' checked> Показать страны
        </label>
    </div>
    <div id='menuAction' class='map__block-menu-action' style='visibility: hidden'>
        <h3>Действия:</h3>
        <div class='map__button-action'>Редактировать</div>
        <div class='map__button-action'>Переместить</div>
        <div class='map__button-action'>Сохранить</div>
    </div>
</div>