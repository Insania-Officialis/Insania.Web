@page

@{
    ViewBag.Title = "Карта";
    Layout = "/Zones/Shared/_Layout.cshtml";
}

<script src='/js/api/geography_api.js' type='text/javascript'></script>
<script src='/js/api/politics_api.js' type='text/javascript'></script>
<script src='/js/api/users_api.js' type='text/javascript'></script>
<script src='https://api-maps.yandex.ru/2.1/?apikey=2c0658bf-8a66-4ffa-ad14-b1df5b5311ca&lang=ru_RU' type='text/javascript'></script>

<style>
    #mapContainer {
        position: relative;
        width: 100%;
        height: 100%;
    }

    #map {
        width: 100%;
        height: 90%;
    }
</style>

<script type='text/javascript'>
    //Токен гостя
    var token;

    //Координаты географических объектов
    var geographyObjectsCoordinates;

    //Координаты стран
    var countriesCoordinates;

    //Координаты рек
    var riversCoordinates;

    //Полгионы географических объектов
    var geographyObjectsPolygons;

    //Полгионы стран
    var countriesPolygons;

    //Полгионы рек
    var riversPolygons;

    //Карта
    var map;

    //Последний выбранный полигон
    var lastSelectesPolygon = null;

    //Текущий редактируемый полигон
    var currentEditingPolygon = null;

    //Текущий перемещаемый полигон
    var currentDraggingPolygon = null;

    //Запуск инициализации карты, при её готовности
    ymaps.ready(init);

    //Ассинхронная функция инициализация карты
    async function init() {
        try {
            //Получение токена
            token = await login();

            //Получение координат
            geographyObjectsCoordinates = await getGeographyObjectsCoordinates();
            countriesCoordinates = await getCountriesCoordinates();
            riversCoordinates = await getRiversCoordinates();

            //Создание фона карты
            let layer = createMapBackground();

            //Добавление слоя в коллекцию слоёв карты
            ymaps.layer.storage.add('my#layer', layer);

            //Добавление нового типа на основании слоя в коллекцию типов карты
            ymaps.mapType.storage.add('my#type', new ymaps.MapType(
                'Пусто',
                ['my#layer']
            ));

            //Создание карты
            map = new ymaps.Map('map', {
                type: 'my#type', //тип карты
                center: [39, 3], //центр позиционирования
                zoom: 2, //коэффициент масштабирования
                controls: [], //элементы управления
            }, {
                //restrictMapArea: true, //ограничение области карты видимой областью
                restrictMapArea: [[-85, -180], [85, 179]], //ограничение области карты прямоугольной областью
                minZoom: 2, //минимальный масштаб
                suppressMapOpenBlock: true, //кнопка 'Открыть в Яндекс картах'
            });

            //Ограничение пользовательского передвижения карты
            map.action.setCorrection(restrictionUserMovement);

            //Подписка на изменение границ карты
            map.events.add('boundschange', () => {
                const bounds = map.getBounds();
                const southWest = bounds[0]; // [широта, долгота] юго-западного угла
                const northEast = bounds[1]; // [широта, долгота] северо-восточного угла
                const zoom = map.getZoom();
                console.info('Границы:', [...southWest, ...northEast]);
                console.info('Уровень масштабирования:', zoom);
            });

            //Инициализации коллекций объектов
            geographyObjectsPolygons = new ymaps.GeoObjectCollection();
            countriesPolygons = new ymaps.GeoObjectCollection();
            riversPolygons = new ymaps.GeoObjectCollection();

            //Добавление полигонов в коллекции геообъектов карты
            map.geoObjects.add(geographyObjectsPolygons);
            geographyObjectsPolygons.add(createPolygon(geographyObjectsCoordinates, 'geographyObjects'));
            map.geoObjects.add(countriesPolygons);
            countriesPolygons.add(createPolygonCountry(countriesCoordinates, 'politics'));
            map.geoObjects.add(riversPolygons);
            riversPolygons.add(createPolygon(riversCoordinates, 'rivers'));

            //Подписки на изменение маркера видимости
            document.querySelector('input[value="objects"]').addEventListener('change', updateVisibility);
            document.querySelector('input[value="countries"]').addEventListener('change', updateVisibility);
            document.querySelector('input[value="rivers"]').addEventListener('change', updateVisibility);
                
            //Подписка на кнопку "Редактировать"
            document.querySelector('#menuAction .map__button-action:nth-child(2)').addEventListener('click', () => { polygonAction('edit'); });
            document.querySelector('#menuAction .map__button-action:nth-child(3)').addEventListener('click', () => { polygonAction('dragg'); });
            document.querySelector('#menuAction .map__button-action:nth-child(4)').addEventListener('click', async () => { await save(); });
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка инициализации карты:', error);
        }
    }

    //Функция создания фона карты
    function createMapBackground() {
        try {
            //Получение текущего url
            let currentLocation = window.location.origin;

            //Создание собственного слоя
            layer = function () { return new ymaps.Layer(function () { return currentLocation + '/images/map.png' }) };

            //Возврат результат
            return layer;
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка создания фона карты:', error);
        }
    }

    //Функция ограничения пользовательского передвижения карты
    function restrictionUserMovement(tick) {
        try {
            //Получение проекции
            var projection = map.options.get('projection');

            //Получение размера картыв
            var mapSize = map.container.getSize();

            //Получение центра
            var tickCenter = projection.fromGlobalPixels(tick.globalPixelCenter, tick.zoom);

            //Получение границ
            var top = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
            var bot = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
            var tickTop = projection.fromGlobalPixels(top, tick.zoom);
            var tickBot = projection.fromGlobalPixels(bot, tick.zoom);

            //Проверка пересечения границы по горизонтали
            if (tickTop[0] > 85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] + mapSize[1] / 2];
                tick.duration = 0;
            }

            //Проверка пересечения по горизонтали
            if (tickBot[0] < -85) {
                //Передвижение пользователя
                tick.globalPixelCenter = projection.toGlobalPixels([-85, tickCenter[1]], tick.zoom);
                tick.globalPixelCenter = [tick.globalPixelCenter[0], tick.globalPixelCenter[1] - mapSize[1] / 2];
                tick.duration = 0;
            }

            //Возврат положения
            return tick;
        } catch(error) {
            //Вывод ошибки
            console.error('Ошибка ограничения пользовательского передвижения карты:', error);
        }
    }

    //Функция создания полигонов
    function createPolygon(objects, type) {
        //Проверки
        if (!objects?.length) throw new Error('Не указан массив объектов');

        //Формирование переменной результата
        var polygons = new ymaps.GeoObjectCollection();

        //Проход по массиву объектов
        for (const object of objects) {
            try {
                //Проверки
                if (!object?.coordinates?.length) throw new Error('Не указаны координаты объекта');

                //Проход по массиву координат объекта
                for (const coordinate of object.coordinates) {
                    //Проверки
                    if (!coordinate?.coordinates?.length) throw new Error('Не указана координата объекта');

                    //Создание полигона
                    const polygon = new ymaps.GeoObject(
                        {
                            //Описание геометрии объекта
                            geometry: {
                                type: 'Polygon', //тип
                                coordinates: coordinate.coordinates //координаты вершин
                            },
                            //Описание свойств геоообъекта
                            properties: {
                                id: coordinate.id, //идентификатор координаты объекта
                                objectId: object.id, //идентификатор объекта
                                coordinateId: coordinate.coordinate_id, //идентификатор координаты
                                type: type, //тип координат
                                name: object.name, //наименование объекта
                                center: object.center, //центр объекта
                                zoom: object.zoom //масштаб объекта
                            }
                        },
                        //Описание опций геообъекта
                        {
                            draggable: false, //Добавление возможности перетаскивания
                            fillColor: coordinate.background_color, //цвет заливки
                            strokeColor: coordinate.border_color, //цвет обводки
                            fillOpacity: 0.75, //общая прозрачность
                            strokeWidth: 0 //ширина обводка
                        }
                    );

                    //Добавление события нажатия
                    polygon.events.add('contextmenu', viewMenuAction);

                    //Добавление события наведение курсора
                    polygon.events.add('mouseenter', function (e) {
                        //Полученик параметров объекта
                        const id = e.get('target').properties.get('objectId');
                        const type = e.get('target').properties.get('type');
                        
                        //Увеличение прозрачности
                        highlightPolygons(id, type, 1);
                    });

                    //Добавление события уведения курсора
                    polygon.events.add('mouseleave', function (e) {
                        //Полученик параметров объекта
                        const id = e.get('target').properties.get('objectId');
                        const type = e.get('target').properties.get('type');
                            
                        //Сброс прозрачности
                        resetPolygonsOpacity(id, type);
                    });

                    //Добавление полигона в массив
                    polygons.add(polygon);
                }
            }
            catch (error) {
                console.error(`Ошибка обработки координат ${error}`);
            }
        }

        //Возврат результата
        return polygons;
    }

    //Функция создания полигона страны
    function createPolygonCountry(coordinates, type) {
        //Проверки
        if (!coordinates?.length) throw new Error('Не указан массив координат');

        //Формирование переменной результата
        var polygons = new ymaps.GeoObjectCollection();

        //Проход по массиву координат
        for (const itemCoordinates of coordinates) {
            try {
                //Проверки
                if (!itemCoordinates?.items?.length) throw new Error('Не указаны координаты объекта');

                //Проход по массиву координат объекта
                for (const coordinate of itemCoordinates.items) {
                    //Проверки
                    if (!coordinate?.coordinates?.length) throw new Error('Не указана координата географического объекта');

                    //Создание полигона
                    const polygon = new ymaps.GeoObject(
                        {
                            //Описание геометрии объекта
                            geometry: {
                                type: 'Polygon', //тип
                                coordinates: coordinate.coordinates //координаты вершин
                            },
                            //Описание свойств геоообъекта
                            properties: {
                                id: coordinate.id, //идентификатор координаты географического объекта
                                objectId: itemCoordinates.id, //идентификатор географического объекта
                                coordinateId: coordinate.coordinate_id, //идентификатор координаты
                                type: type, //тип координат
                                name: itemCoordinates.name, //наименование географического объекта
                                center: coordinate.center, //центр географического объекта
                                zoom: coordinate.zoom //масштаб географического объекта
                            }
                        },
                        //Описание опций геообъекта
                        {
                            draggable: false, //Добавление возможности перетаскивания
                            fillColor: coordinate.background_color, //цвет заливки
                            strokeColor: coordinate.border_color, //цвет обводки
                            fillOpacity: 0.75, //общая прозрачность
                            strokeWidth: 0 //ширина обводка
                        }
                    );

                    //Добавление события нажатия
                    polygon.events.add('contextmenu', viewMenuAction);

                    //Добавление события наведение курсора
                    polygon.events.add('mouseenter', function (e) {
                        //Полученик параметров объекта
                        const id = e.get('target').properties.get('objectId');
                        const type = e.get('target').properties.get('type');
                        
                        //Увеличение прозрачности
                        highlightPolygons(id, type, 1);
                    });

                    //Добавление события уведения курсора
                    polygon.events.add('mouseleave', function (e) {
                        //Полученик параметров объекта
                        const id = e.get('target').properties.get('objectId');
                        const type = e.get('target').properties.get('type');
                            
                        //Сброс прозрачности
                        resetPolygonsOpacity(id, type);
                    });

                    //Добавление полигона в массив
                    polygons.add(polygon);
                }
            }
            catch (error) {
                console.error(`Ошибка обработки координат ${error}`);
            }
        }

        //Возврат результата
        return polygons;
    }

    //Функция обновления видимости
    function updateVisibility() {
        //Получение нажатия элементов
        const objectsChecked = document.querySelector('input[value="objects"]').checked;
        const countriesChecked = document.querySelector('input[value="countries"]').checked;
        const riversChecked = document.querySelector('input[value="rivers"]').checked;

        //Изменение видимости
        geographyObjectsPolygons.options.set('visible', objectsChecked);
        countriesPolygons.options.set('visible', countriesChecked);
        riversPolygons.options.set('visible', riversChecked);
        
        //Выход, если просто выключили географические объекты
        if (!objectsChecked) return;

        //Переключение видимости нижестоящих объектов, если они включены
        if (countriesChecked) {
            countriesPolygons.options.set('visible', false);
            countriesPolygons.options.set('visible', true);
        }
        if (riversChecked) {
            riversPolygons.options.set('visible', false);
            riversPolygons.options.set('visible', true);
        }
    }

    //Функция отображения меню действий
    function viewMenuAction(e) {
        //Получение меню со страницы
        var menu = document.getElementById('menuAction');

        //Получение нажатого объекта
        var target = e.get('target');
        var objectName = target.properties.get('name');

        //Обновление заголовка меню
        var menuTitle = menu.querySelector('h2');
        menuTitle.textContent = objectName;

        //Смена позиции меню
        menu.style.left = e.get('pagePixels')[0] + 'px';
        menu.style.top = e.get('pagePixels')[1] + 'px';

        //Получение кнопки редактировани
        let editButton = document.getElementById('editButton');

        //Смена текста кнопки в зависимости от редактируемости полигона
        if (target.properties.get('id') === currentEditingPolygon?.properties?.get('id') && target.properties.get('type') === currentEditingPolygon?.properties?.get('type')) editButton.textContent = 'Отключить редактирование';
        else editButton.textContent = 'Включить редактирование';

        //Получение кнопки перемещения
        let dragsButton = document.getElementById('dragsButton');

        //Смена текста кнопки в зависимости от перемещаемости полигона
        if (target.properties.get('id') === currentDraggingPolygon?.properties?.get('id') && target.properties.get('type') === currentDraggingPolygon?.properties?.get('type')) dragsButton.textContent = 'Отключить перемещение';
        else dragsButton.textContent = 'Включить перемещение';

        //Запись выбранного полигона
        lastSelectesPolygon = { target: target };

        //Отображение меню
        menu.style.visibility = 'visible';
        
        //Добавление события закрытия меню действий при клике вне него
        document.addEventListener('click', closeMenuOnClickOutside);
    }

    //Функция подсветки всех полигонов объекта
    function highlightPolygons(objectId, type, opacity) {
        [geographyObjectsPolygons, countriesPolygons].forEach(x => {
            x.each(y => {
                y.each(z => {
                    if (z.properties.get('objectId') === objectId && z.properties.get('type') === type) z.options.set('fillOpacity', opacity);
                });
            });
        });
    }
    
    //Функция сброса прозрачности
    const resetPolygonsOpacity = (objectId, type) => highlightPolygons(objectId, type, 0.75);

    //Функция закрытия меню при клике вне его
    function closeMenuOnClickOutside(e) {
        //Получение меню со страницы
        const menu = document.getElementById('menuAction');
        if (!menu.contains(e.target)) {
            //Скрытие имеющегося меню
            menu.style.visibility = 'hidden';

            //Удаление последнего выбранного полигона
            lastSelectesPolygon = null;

            //Удаление обработчика нажатия вне меню
            document.removeEventListener('click', closeMenuOnClickOutside);
        }
    }

    //Функция включения/отключения действий с полигоном
    function polygonAction(action) {
        //Скрытие меню
        document.getElementById('menuAction').style.visibility = 'hidden';

        //Получение последнего выбранного полигона
        const target = lastSelectesPolygon.target;

        //Если есть выбранный полигон
        if (target) {
            //Если это тот же полигон, что уже редактируется и действие - редактирование
            if (currentEditingPolygon && currentEditingPolygon === target && action === 'edit') {
                //Отключение редактирования
                target.editor.stopEditing();

                //Сброс редактируемого полигона
                currentEditingPolygon = null;

                //Выход
                return;
            }

            //Если это тот же полигон, что уже перемещается и действие - перемещение
            if (currentDraggingPolygon && currentDraggingPolygon === target && action === 'dragg') {
                //Отключение перемещения
                currentDraggingPolygon.options.set({ draggable: false });

                //Сброс перемещаемого полигона
                currentDraggingPolygon = null;

                //Выход
                return;
            }

            //Отключение редактирования предыдушего полигона, при его наличии
            if (currentEditingPolygon) currentEditingPolygon.editor.stopEditing();

            //Отключение перемещения предыдушего полигона, при его наличии
            if (currentDraggingPolygon) currentDraggingPolygon.options.set({ draggable: false });
            
            //Отключение редактирования
            target.editor.stopEditing();

            //Сброс редактируемого полигона
            currentEditingPolygon = null;

            //Отключение перемещения
            target.options.set({ draggable: false });

            //Сброс перемещаемого полигона
            currentDraggingPolygon = null;

            //Если действие - редактирование
            if (action === 'edit') {
                //Включение редактирования выбранного полигона
                target.editor.startEditing();

                //Запись редактируемого полигона
                currentEditingPolygon = target;
            }

            //Если действие - перемещение
            if (action === 'dragg') {
                //Включение перемещения выбранного полигона
                target.options.set({ draggable: true });

                //Запись перемещаемого полигона
                currentDraggingPolygon = target;
            }
        }
    }

    //Асинхронная функция получения координат географических объектов
    async function getGeographyObjectsCoordinates() {
        try {
            //Получение списка географических объектов с координатами
            var geographicObjectsWithCoordinates = await getGeographyObjectsListWithCoordinates(token, [4,6]);

            //Проверки
            if (!geographicObjectsWithCoordinates?.length) throw new Error('Не удалось получить географические объекты с координатами');

            //Возврат результата
            return geographicObjectsWithCoordinates;
        }
        catch (error) {
            console.error(`Ошибка получения координат ${error}`);
            return null;
        }
    }

    //Асинхронная функция получения координат стран
    async function getCountriesCoordinates() {
        try {
            //Получение списка стран
            var countries = await getCountriesList(token);

            //Создание массива промисов для параллельных запросов
            const coordinatesPromises = countries.map(item => {
                //Проверка наличия идентификатора
                if (!item.id) throw new Error(`Не указан идентификатор страны: ${item}`);

                //Возврат результата
                return getCountriesCoordinatesList(token, item.id);
            });

            //Ожидание получения всех координат
            const coordinatesResults = await Promise.all(coordinatesPromises);

            //Получение корректного списка координат
            const coordinates = coordinatesResults.filter(item => item !== null && item !== undefined);

            //Проверки
            if (!coordinates?.length) throw new Error('Не удалось получить координаты страны');

            //Возврат результата
            return coordinates;
        }
        catch (error) {
            console.error(`Ошибка получения координат ${error}`);
            return null;
        }
    }

    //Асинхронная функция получения координат рек
    async function getRiversCoordinates() {
        try {
            //Получение списка рек с координатами
            var riversWithCoordinates = await getGeographyObjectsListWithCoordinates(token, [8]);

            //Проверки
            if (!riversWithCoordinates?.length) throw new Error('Не удалось получить реки с координатами');

            //Возврат результата
            return riversWithCoordinates;
        }
        catch (error) {
            console.error(`Ошибка получения координат ${error}`);
            return null;
        }
    }

    //Асинхронная функция сохранения полигона
    async function save() {
        //Скрытие меню
        document.getElementById('menuAction').style.visibility = 'hidden';

        //Получение последнего выбранного полигона
        const target = lastSelectesPolygon.target;

        //Если есть выбранный полигон
        if (target) {
            //Отключение редактирования
            target.editor.stopEditing();

            //Сброс редактируемого полигона
            currentEditingPolygon = null;

            //Отключение перемещения
            target.options.set({ draggable: false });

            //Сброс перемещаемого полигона
            currentDraggingPolygon = null;

            //Получение данных полигона
            const type = target.properties.get('type'); //тип
            const coordinates = target.geometry.getCoordinates(); //координаты
            const objectId = target.properties.get('objectId'); //идентификатор объекта
            const coordinateId = target.properties.get('coordinateId'); //идентификатор координаты
            console.log([type, coordinates, objectId, coordinateId].join(';'));

            try {
                //Отправка запроса, в зависимости от типа
                switch (type) {
                    case 'geographyObjects': case 'rivers' {
                        var result = await upgradeGeographyObjectsCoordinates(objectId, coordinateId, coordinates, token);
                        console.log(result);
                    } break;
                }
            }
            catch (error) {
                console.error(`Ошибка обновления координат ${error}`);
            }
        }
    }
</script>

<div id='mapContainer'>
    <div id='map'></div>
    <div id='layerPanel' class='map__block-layer'>
        <h3>Слои:</h3>
        <label class='map__label-layer'>
            <input class='map__checkbox-layer' type='checkbox' name='filter' value='objects' checked> Показать объекты
        </label>
        <label class='map__label-layer'>
            <input class='map__checkbox-layer' type='checkbox' name='filter' value='countries' checked> Показать страны
        </label>
        <label class='map__label-layer'>
            <input class='map__checkbox-layer' type='checkbox' name='filter' value='rivers' checked> Показать реки
        </label>
    </div>
    <div id='menuAction' class='map__block-menu-action' style='visibility: hidden'>
        <h2 style='text-align: center;'></h2>
        <div id='editButton' class='map__button-action'></div>
        <div id='dragsButton' class='map__button-action'></div>
        <div class='map__button-action'>Сохранить</div>
    </div>
</div>