@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewBag.Title = "Авторизация";
    Layout = "/Zones/Shared/_Layout.cshtml";
}

<script src="/js/api/users_api.js" type="text/javascript"></script>

<div class="authentication__outer-block">
    <div class="authentication__inner-block">
        <div class="authentication__title-block">
            <div class="authentication__title-text">
                ИНСАНИЯ
            </div>
        </div>
        <div class="authentication__inputs-block">
            <input type="text" id="autenticication-input-password-login" autocomplete="off" placeholder="Логин" class="authentication__inputs-input" />
            <div class="authentication__password-block">
                <input type="text" id="autenticication-input-password-display" autocomplete="off" placeholder="Пароль" class="authentication__inputs-input" />
                <a id="autentification-button-password-show" class="authentication__password-visibility-button"
                   onmousedown="showPassword()" onmouseup="hidePassword()" onmouseleave="hidePassword()"
                   ontouchstart="showPassword()" ontouchend="hidePassword()" ontouchcancel="hidePassword()">
                    👁
                </a>
                <input type="hidden" id="autenticication-input-password-real" />
            </div>
            <span id="autenticication-text-error" class="base__text--error" style="display: none">Ошибка</span>
        </div>
        <div class="authentication__actions-block">
            <a class="authentication__actions-button">
                <span id="autentification-text-login">Войти</span>
                <partial name="/Zones/Shared/Spinner/Spinner.cshtml" />
            </a>
            <a class="authentication__actions-button">Зарегистрироваться</a>
        </div>
        <div class="authentication__actions-block">
            <a class="authentication__actions-link">Забыли пароль?</a>
        </div>
    </div>
</div>

<script>
    //Объявление общих переменных
    let realPassword = ""; //реальный пароль
    let passwordDisplayInput = document.getElementById("autenticication-input-password-display"); //компонент отоброжаемого пароля
    let passwordRealInput = document.getElementById("autenticication-input-password-real"); //компонент реального пароля
    let loginInput = document.getElementById("autenticication-input-password-login"); //компонент логина
    let spinner = document.getElementById("spinner"); //компонент колеса загрузки
    let textLogin = document.getElementById("autentification-text-login"); //компонент текста входа
    let textError = document.getElementById("autenticication-text-error"); //компонент текста ошибки
    let selectionStart = 0; //начало выделения
    let selectionEnd = 0; //конец выделение

    //Функция сохранения позиций выделения
    function saveSelection() {
        selectionStart = passwordDisplayInput.selectionStart;
        selectionEnd = passwordDisplayInput.selectionEnd;
    }

    //Функция восстановления позиций выделения
    function restoreSelection() {
        passwordDisplayInput.setSelectionRange(selectionStart, selectionEnd);
    }

    //Функция обработки ввода пароля
    function handlePasswordInput(input) {
        //Сохранение позиций выделения
        saveSelection();

        //Получение значений
        const displayValue = input.value;
        const realValue = passwordRealInput.value;

        //Если длина отображаемого пароля больше реального
        if (displayValue.length > realValue.length) {
            //Получение длины добавленных символов
            const addedChars = displayValue.length - realValue.length;

            //Получение начальной позции всавки
            const insertPos = selectionStart - addedChars;

            //Получение всавленных символов
            const newChars = displayValue.substr(insertPos, addedChars);

            //Запись реального пароля
            passwordRealInput.value = realValue.substring(0, insertPos) + newChars + realValue.substring(insertPos);

            //Замена символов в отображаемом пароле
            input.value = realValue.substring(0, insertPos) + "•".repeat(addedChars) + realValue.substring(insertPos);
        }
        //Если длина отображаемого пароля меньше реального
        else if (displayValue.length < realValue.length) {
            //Получение длины удалённых символов
            const deletedCount = realValue.length - displayValue.length;

            //Если было выделение
            if (selectionStart !== selectionEnd) {
                //Удаление выделенного текста
                passwordRealInput.value = realValue.substring(0, selectionStart) + realValue.substring(selectionEnd);

                //Замена символов в отображаемом пароле
                input.value = "•".repeat(passwordRealInput.value.length);
            } 
            //В ином случае
            else {
                //Если удаление в середине
                if (selectionStart !== realValue.length - deletedCount) passwordRealInput.value = realValue.substring(0, selectionStart) + realValue.substring(selectionStart + deletedCount);
                //В ином случае
                else passwordRealInput.value = realValue.substring(0, realValue.length - deletedCount);

                //Замена символов в отображаемом пароле
                input.value = "•".repeat(passwordRealInput.value.length);
            }
        }
        //В ином случае
        else {
            //Замена символов (при вставке поверх выделенного)
            input.value = "•".repeat(passwordRealInput.value.length);
        }

        //Восстановление позиции выделения
        restoreSelection();
    }

    //Функция обработки нажатий клавиш
    function handleKeyDown(e) {
        //Сохранение позиций выделения
        saveSelection();

        //Передача браузеру возможности выполнить удаление и обработка изменений для клавиш удаления
        if (e.key === "Backspace" || e.key === "Delete") setTimeout(() => handlePasswordInput(passwordDisplayInput), 0);
        //Для несистемных клавиш
        else if (e.key.length === 1 && !e.ctrlKey && !e.metaKey) {
            //Предотвращение стандартного поведения
            e.preventDefault();

            //Получение клавиши
            const newChar = e.key;

            //Получение реального пароля
            const currentReal = passwordRealInput.value;

            //Замена символов
            if (selectionStart !== selectionEnd) passwordRealInput.value = currentReal.substring(0, selectionStart) + newChar + currentReal.substring(selectionEnd);
            //Вставка символов
            else passwordRealInput.value = currentReal.substring(0, selectionStart) + newChar + currentReal.substring(selectionStart);

            //Замена символов в отображаемом пароле
            passwordDisplayInput.value = "•".repeat(passwordRealInput.value.length);

            //Восстановление выделения
            selectionStart = selectionStart + 1;
            selectionEnd = selectionStart;
            restoreSelection();
        }
    }

    //Функция обработки вставки
    function handlePaste(e) {
        //Предотвращение стандартного поведения
        e.preventDefault();

        //Сохранение позиций выделения
        saveSelection();

        //Получение вставляемого текста
        const pastedText = (e.clipboardData || window.clipboardData).getData("text");

        //Получение реального пароля
        const currentReal = passwordRealInput.value;

        //Замена символов
        if (selectionStart !== selectionEnd) passwordRealInput.value = currentReal.substring(0, selectionStart) + pastedText + currentReal.substring(selectionEnd);
        //Вставка символов
        else passwordRealInput.value = currentReal.substring(0, selectionStart) + pastedText + currentReal.substring(selectionStart);

        //Замена символов в отображаемом пароле
        passwordDisplayInput.value = "•".repeat(passwordRealInput.value.length);

        //Восстановление выделения
        selectionStart = selectionStart + pastedText.length;
        selectionEnd = selectionStart;
        restoreSelection();
    }

    //Функция обработки вырезания
    function handleCut(e) {
        //Предотвращение стандартного поведения
        e.preventDefault();

        //Сохранение позиций выделения
        saveSelection();

        //Замена символов
        if (selectionStart !== selectionEnd) {
            //Получение выделенного текста
            const selectedText = passwordRealInput.value.substring(selectionStart, selectionEnd);

            //Запись выделенного текста
            (e.clipboardData || window.clipboardData).setData("text", selectedText);

            //Запись реального пароля
            passwordRealInput.value = passwordRealInput.value.substring(0, selectionStart) + passwordRealInput.value.substring(selectionEnd);
            
            //Замена символов в отображаемом пароле
            passwordDisplayInput.value = "•".repeat(passwordRealInput.value.length);

            //Восстановление выделения
            selectionEnd = selectionStart;
            restoreSelection();
        }
    }

    //Функция показа пароля
    function showPassword() {
        //Отображение пароля, если он есть
        if (passwordRealInput.value.length > 0) passwordDisplayInput.value = passwordRealInput.value;
    }

    //Функция скрытия пароля
    function hidePassword() {
        //Если есть пароль
        if (passwordRealInput.value.length > 0) {
            //Замена символов
            passwordDisplayInput.value = "•".repeat(passwordRealInput.value.length);

            //Восстановление выделения
            restoreSelection();
        }
    }

    //Функция отображения ошибки
    function showError(text) {
        //Ошибка, если нет компонента текста ошибки
        if (!textError) throw new Error("Не определён компонент текста ошибки");

        //Смена текста ошибки
        textError.innerText = text;

        //Смена состояния видимости ошибки
        textError.style = "display: block";
    }

    //Функция аутентификации
    async function authentication() {
        try {
            //Показ колеса загрузки
            textLogin.style = "display: none";
            spinner.style = "display: inline-flex";

            //Получение параметров
            const loginValue = loginInput.value;
            const passwordValue = passwordRealInput.value;

            //Проверка параметров
            if (!loginValue || !passwordValue) throw new Error("Не указаны обязательные поля");

            //Получение ответа с сервера
            const response = await login(loginValue, passwordValue);

            //Запись токена в локальное хранилище
            localStorage.setItem("token", response);
        } catch(error) {
            //Отображение ошибки
            showError(error.message);
        } finally {
            //Скрытие колеса загрузки
            textLogin.style = "display: inline-flex";
            spinner.style = "display: none";
        }
    }

    //Инициализация
    document.addEventListener("DOMContentLoaded", function() {
        //Сохранении позиции при выделении
        passwordDisplayInput.addEventListener("select", saveSelection);

        //Сохранении позиции при нажатии
        passwordDisplayInput.addEventListener("click", saveSelection);

        //Сохранении позиции при фокусировке
        passwordDisplayInput.addEventListener("focus", saveSelection);

        //Обработка ввода
        passwordDisplayInput.addEventListener("input", function(e) { handlePasswordInput(this); });

        //Обработка нажатия на клавиши
        passwordDisplayInput.addEventListener("keydown", function(e) { handleKeyDown(e); });

        //Обработка вставки
        passwordDisplayInput.addEventListener("paste", function(e) { handlePaste(e); });

        //Обработка вырезания
        passwordDisplayInput.addEventListener("cut", function(e) { handleCut(e); });

        //Обработка нажатия на кнопку авторизации
        document.querySelector(".authentication__actions-button").addEventListener("click", authentication);
    });
</script>